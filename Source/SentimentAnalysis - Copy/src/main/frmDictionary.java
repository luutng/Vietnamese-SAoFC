/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import static SentimentAnalysis.subjectivity.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luu
 */
public class frmDictionary extends javax.swing.JFrame {

    static DefaultTableModel modelAdjective;
    static DefaultTableModel modelAdverb;
    static DefaultTableModel modelIntensifier;
    static DefaultTableModel modelNoun;
    static DefaultTableModel modelVerb;

    public frmDictionary() {
        initComponents();
        modelAdjective = (DefaultTableModel) tbAdjective.getModel();
        modelAdverb = (DefaultTableModel) tbAdverb.getModel();
        modelIntensifier = (DefaultTableModel) tbIntensifier.getModel();
        modelNoun = (DefaultTableModel) tbNoun.getModel();
        modelVerb = (DefaultTableModel) tbVerb.getModel();
        refresh();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbAdjective = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbAdverb = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbIntensifier = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbNoun = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbVerb = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dictionary");
        setResizable(false);

        tbAdjective.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Words", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbAdjective);
        if (tbAdjective.getColumnModel().getColumnCount() > 0) {
            tbAdjective.getColumnModel().getColumn(0).setMinWidth(50);
            tbAdjective.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbAdjective.getColumnModel().getColumn(0).setMaxWidth(50);
            tbAdjective.getColumnModel().getColumn(1).setResizable(false);
            tbAdjective.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Adjective", jScrollPane1);

        tbAdverb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Words", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbAdverb);
        if (tbAdverb.getColumnModel().getColumnCount() > 0) {
            tbAdverb.getColumnModel().getColumn(0).setMinWidth(50);
            tbAdverb.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbAdverb.getColumnModel().getColumn(0).setMaxWidth(50);
            tbAdverb.getColumnModel().getColumn(1).setResizable(false);
            tbAdverb.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Adverb", jScrollPane2);

        tbIntensifier.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Words", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbIntensifier);
        if (tbIntensifier.getColumnModel().getColumnCount() > 0) {
            tbIntensifier.getColumnModel().getColumn(0).setMinWidth(50);
            tbIntensifier.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbIntensifier.getColumnModel().getColumn(0).setMaxWidth(50);
            tbIntensifier.getColumnModel().getColumn(1).setResizable(false);
            tbIntensifier.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Intensifier", jScrollPane3);

        tbNoun.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Words", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tbNoun);
        if (tbNoun.getColumnModel().getColumnCount() > 0) {
            tbNoun.getColumnModel().getColumn(0).setMinWidth(50);
            tbNoun.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbNoun.getColumnModel().getColumn(0).setMaxWidth(50);
            tbNoun.getColumnModel().getColumn(1).setResizable(false);
            tbNoun.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Noun", jScrollPane4);

        tbVerb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Words", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tbVerb);
        if (tbVerb.getColumnModel().getColumnCount() > 0) {
            tbVerb.getColumnModel().getColumn(0).setMinWidth(50);
            tbVerb.getColumnModel().getColumn(0).setPreferredWidth(50);
            tbVerb.getColumnModel().getColumn(0).setMaxWidth(50);
            tbVerb.getColumnModel().getColumn(1).setResizable(false);
            tbVerb.getColumnModel().getColumn(2).setResizable(false);
        }

        jTabbedPane1.addTab("Verb", jScrollPane5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refresh(){
        readDictionary("Adjective");
        for (int i = 0; i < arrAdjectiveDictionary.length; i++) {
            modelAdjective.insertRow(modelAdjective.getRowCount(),
                    new Object[]{Integer.toString(i + 1), arrAdjectiveDictionary[i][0], arrAdjectiveDictionary[i][1]});
        }
        readDictionary("Adverb");
        
        for (int i = 0; i < arrAdverbDictionary.length; i++) {
            modelAdverb.insertRow(modelAdverb.getRowCount(),
                    new Object[]{Integer.toString(i + 1), arrAdverbDictionary[i][0], arrAdverbDictionary[i][1]});
        }
        readDictionary("Intensifier");
        for (int i = 0; i < arrIntensifierDictionary.length; i++) {
            modelIntensifier.insertRow(modelIntensifier.getRowCount(),
                    new Object[]{Integer.toString(i + 1), arrIntensifierDictionary[i][0], arrIntensifierDictionary[i][1]});
        }
        readDictionary("Noun");
        for (int i = 0; i < arrNounDictionary.length; i++) {
            modelNoun.insertRow(modelNoun.getRowCount(),
                    new Object[]{Integer.toString(i + 1), arrNounDictionary[i][0], arrNounDictionary[i][1]});
        }
        readDictionary("Verb");
        for (int i = 0; i < arrVerbDictionary.length; i++) {
            modelVerb.insertRow(modelVerb.getRowCount(),
                    new Object[]{Integer.toString(i + 1), arrVerbDictionary[i][0], arrVerbDictionary[i][1]});
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDictionary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private static javax.swing.JTable tbAdjective;
    private static javax.swing.JTable tbAdverb;
    private static javax.swing.JTable tbIntensifier;
    private static javax.swing.JTable tbNoun;
    private static javax.swing.JTable tbVerb;
    // End of variables declaration//GEN-END:variables
}
